import { logger, extendViteConfig, defineNuxtModule, createResolver } from '@nuxt/kit';
import { resolve } from 'node:path';
import { existsSync } from 'node:fs';
import { startSubprocess } from '@nuxt/devtools-kit';
import { getPort } from 'get-port-please';

async function setupStorybook(options, nuxt) {
  const STORYBOOK_ROUTE = options.storybookRoute || "/__storybook_route";
  const STORYBOOK_PORT = await getPort({ ports: [options.port || 6006, 6007, 6008, 6009, 6010] });
  const STORYBOOK_URL = "http://localhost:" + STORYBOOK_PORT;
  const projectDir = resolve(nuxt.options.rootDir);
  const args = isStorybookConfigured(projectDir) ? ["storybook", "dev", "--port", `${STORYBOOK_PORT}`, "--ci"] : ["storybook-nuxt", "init", "--start", "--port", `${STORYBOOK_PORT}`, "--ci"];
  logger.info(" ");
  logger.info(isStorybookConfigured(projectDir) ? "\u{1F4DA}  Storybook is configured" : "\u{1F4DA}  Storybook is not installed");
  logger.info("");
  if (!nuxt.options.dev)
    return;
  nuxt.hook("app:resolve", async () => {
    const _process = startSubprocess(
      {
        command: "npx",
        args,
        cwd: projectDir
      },
      {
        id: "nuxt-storybook-module:client",
        name: "Storybook Server Terminal"
      },
      nuxt
    );
    _process.getProcess().stdout?.pipe(process.stdout);
    _process.getProcess().stderr?.pipe(process.stderr);
    nuxt.hook(
      "close",
      () => {
        logger.info(" \u26A0\uFE0F Closing Storybook  ");
        return _process.terminate();
      }
    );
    await new Promise((resolve2) => setTimeout(resolve2, 2e3));
    logger.info("\u2139\uFE0F Storybook ready  ");
  });
  const storybookProxy = {
    target: `http://localhost:${STORYBOOK_PORT}`,
    changeOrigin: true,
    followRedirects: true,
    secure: false,
    rewrite: (path) => path.replace(STORYBOOK_ROUTE, ""),
    ws: true
  };
  extendViteConfig((config) => {
    var _a;
    config.optimizeDeps ?? (config.optimizeDeps = {});
    config.optimizeDeps.include = config.optimizeDeps.include || [];
    nuxt.options.devtools = true;
    config.server ?? (config.server = {});
    (_a = config.server).proxy ?? (_a.proxy = {});
    config.server.proxy[STORYBOOK_ROUTE] = storybookProxy;
    config.server.proxy["/@vite/client"] = storybookProxy;
    config.server.proxy["/virtual:/@storybook"] = storybookProxy;
    config.server.proxy["/node_modules"] = storybookProxy;
    config.server.proxy["/.storybook"] = storybookProxy;
    config.server.proxy["/stores"] = storybookProxy;
    config.server.proxy["/stories"] = storybookProxy;
    config.server.proxy["/assets"] = storybookProxy;
    config.server.proxy["/@id"] = storybookProxy;
    config.server.proxy["/@fs"] = storybookProxy;
    config.server.proxy["/app.vue"] = storybookProxy;
    config.server.proxy["/.nuxt"] = storybookProxy;
    config.server.proxy["/app.config.mjs"] = storybookProxy;
    config.server.proxy["/i18n.options.mjs"] = storybookProxy;
    config.server.proxy["/i18n.config.ts"] = storybookProxy;
    config.server.proxy["/components"] = storybookProxy;
    config.server.proxy["/composables"] = storybookProxy;
    config.server.proxy["/layouts"] = storybookProxy;
    config.server.proxy["/pages"] = storybookProxy;
    config.server.proxy["/storybook-server-channel"] = storybookProxy;
  });
  nuxt.hook("build:done", () => {
    logger.info(" ");
    logger.info("\u2714 Storybook build done  ");
    logger.info("  ");
    nuxt.options.devtools = true;
    process.env.__STORYBOOK__ = JSON.stringify(options);
  });
  logger.info("\u{1F517} STORYBOOK_URL :", STORYBOOK_URL);
  nuxt.hook("devtools:customTabs", (tabs) => {
    tabs.push({
      // unique identifier
      name: "nuxt-storybook",
      // title to display in the tab
      title: "Storybook",
      // any icon from Iconify, or a URL to an image
      icon: "devicon:storybook",
      // iframe view
      view: {
        type: "iframe",
        // absolute URL to the iframes
        src: `${STORYBOOK_ROUTE}/`
      }
    });
  });
}
function isStorybookConfigured(rootDir) {
  const isTypeScriptProject = existsSync(resolve(rootDir, "tsconfig.json"));
  const configFileExtension = isTypeScriptProject ? "ts" : "js";
  const sbMain = existsSync(resolve(rootDir, `.storybook/main.${configFileExtension}`));
  return sbMain;
}

const module = defineNuxtModule({
  meta: {
    name: "@storybook-vue/nuxt-storybook",
    configKey: "storybook",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {
    url: process.env.STORYBOOK_URL || "http://localhost:6006",
    storybookRoute: "/__storybook_route",
    port: 6006,
    version: "v7",
    cookieName: "sb_session",
    devtools: false
  },
  async setup(options, nuxt) {
    if (process.env.__STORYBOOK__)
      return;
    logger.info("\u{1F50C}  Storybook Module Setup");
    createResolver(import.meta.url);
    nuxt.options.ssr = false;
    setupStorybook(options, nuxt);
  }
});

export { module as default };
