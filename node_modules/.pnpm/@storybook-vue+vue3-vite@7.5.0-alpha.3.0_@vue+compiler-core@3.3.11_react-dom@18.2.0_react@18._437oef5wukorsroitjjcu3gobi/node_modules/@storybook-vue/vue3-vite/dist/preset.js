"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/find-package-json/index.js
var require_find_package_json = __commonJS({
  "../../node_modules/find-package-json/index.js"(exports, module2) {
    "use strict";
    var path2 = require("path");
    var fs = require("fs");
    function parse(data) {
      data = data.toString("utf-8");
      if (data.charCodeAt(0) === 65279)
        data = data.slice(1);
      try {
        return JSON.parse(data);
      } catch (e) {
        return false;
      }
    }
    var iteratorSymbol = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.iterator : null;
    function addSymbolIterator(result) {
      if (!iteratorSymbol) {
        return result;
      }
      result[iteratorSymbol] = function() {
        return this;
      };
      return result;
    }
    module2.exports = function find(root) {
      root = root || process.cwd();
      if (typeof root !== "string") {
        if (typeof root === "object" && typeof root.filename === "string") {
          root = root.filename;
        } else {
          throw new Error("Must pass a filename string or a module object to finder");
        }
      }
      return addSymbolIterator({
        /**
         * Return the parsed package.json that we find in a parent folder.
         *
         * @returns {Object} Value, filename and indication if the iteration is done.
         * @api public
         */
        next: function next() {
          if (root.match(/^(\w:\\|\/)$/))
            return addSymbolIterator({
              value: void 0,
              filename: void 0,
              done: true
            });
          var file = path2.join(root, "package.json"), data;
          root = path2.resolve(root, "..");
          if (fs.existsSync(file) && (data = parse(fs.readFileSync(file)))) {
            data.__path = file;
            return addSymbolIterator({
              value: data,
              filename: file,
              done: false
            });
          }
          return next();
        }
      });
    };
  }
});

// src/preset.ts
var preset_exports = {};
__export(preset_exports, {
  core: () => core,
  viteFinal: () => viteFinal
});
module.exports = __toCommonJS(preset_exports);
var import_builder_vite = require("@storybook/builder-vite");
var import_vite2 = require("vite");
var import_path2 = require("path");

// src/plugins/vue-component-meta.ts
var import_path = __toESM(require("path"));
var import_find_package_json = __toESM(require_find_package_json());
var import_vite = require("vite");
var import_magic_string = __toESM(require("magic-string"));
var import_vue_component_meta = require("vue-component-meta");
function vueComponentMeta() {
  const exclude = /(\.stories\.ts|\.stories\.js|\.stories\.tsx|\.stories\.jsx)$/;
  const include = /\.(vue|ts|js|tsx|jsx)$/;
  const filter = (0, import_vite.createFilter)(include, exclude);
  const checkerOptions = {
    forceUseTs: true,
    noDeclarations: true,
    schema: { ignore: ["MyIgnoredNestedProps"] },
    printer: { newLine: 1 }
  };
  const checker = (0, import_vue_component_meta.createComponentMetaCheckerByJsonConfig)(
    import_path.default.resolve(getProjectRoot().absolutePathToProjectRoot),
    {
      extends: "../../tsconfig.json",
      include: ["**/*"]
    },
    checkerOptions
  );
  return {
    name: "storybook:vue-component-meta-plugin",
    async transform(src, id) {
      if (!filter(id))
        return void 0;
      let metaSource;
      try {
        const exportNames = checker.getExportNames(id);
        const componentsMeta = exportNames.map((name) => checker.getComponentMeta(id, name));
        const metaSources = [];
        componentsMeta.forEach((meta) => {
          const exportName = exportNames[componentsMeta.indexOf(meta)];
          if (meta.type === import_vue_component_meta.TypeMeta.Class || meta.type === import_vue_component_meta.TypeMeta.Function) {
            metaSources.push({
              exportName,
              displayName: exportName === "default" ? getNameFromFile(id).name : exportName,
              ...meta,
              sourceFiles: id
            });
          }
        });
        const s = new import_magic_string.default(src);
        if (metaSources.length === 0)
          return void 0;
        if (metaSources.length === 1) {
          metaSource = JSON.stringify(metaSources[0]);
          if (!id.endsWith(".vue") && metaSources[0].exportName === "default" && (metaSources[0].type === import_vue_component_meta.TypeMeta.Function || metaSources[0].type === import_vue_component_meta.TypeMeta.Class)) {
            s.replace("export default defineComponent", "const _sfc_main = defineComponent");
            s.append(`
export default _sfc_main`);
          } else if (metaSources[0].exportName !== "default") {
            s.append(`
export const _sfc_main = defineComponent({})`);
            s.append(`
;${metaSources[0].exportName}.__docgenInfo = ${metaSource}`);
          }
          s.append(`;_sfc_main.__docgenInfo = ${metaSource}`);
        }
        if (metaSources.length > 1) {
          if (!id.endsWith(".vue")) {
            const docgenInfos = metaSources.map((m) => `${m.exportName}.__docgenInfo = ${JSON.stringify(m)}`).join(";\n");
            s.append(`
${docgenInfos}`);
          }
        }
        return {
          code: s.toString(),
          map: s.generateMap({ hires: true, source: id })
        };
      } catch (e) {
        return void 0;
      }
    }
  };
}
function getProjectRoot() {
  var _a;
  const projectRoot = ((_a = (0, import_find_package_json.default)().next().value) == null ? void 0 : _a.path) ?? "";
  const currentFileDir = import_path.default.dirname(__filename);
  const relativePathToProjectRoot = import_path.default.relative(currentFileDir, projectRoot);
  const absolutePathToProjectRoot = import_path.default.resolve(currentFileDir, relativePathToProjectRoot);
  return { relativePathToProjectRoot, absolutePathToProjectRoot };
}
function getNameFromFile(filename) {
  const fileName = import_path.default.basename(filename);
  const name = fileName.replace(/\.(vue|ts|js|tsx|jsx)/, "");
  return { fileName, name };
}

// src/preset.ts
var getAbsolutePath = (input) => (0, import_path2.dirname)(require.resolve((0, import_path2.join)(input, "package.json")));
var core = {
  builder: getAbsolutePath("@storybook/builder-vite"),
  renderer: getAbsolutePath("@storybook/vue3")
};
var viteFinal = async (config, { _ }) => {
  const plugins = [];
  if (!(config.plugins && await (0, import_builder_vite.hasVitePlugins)(config.plugins, ["vite:vue"]))) {
    const { default: vue } = await import("@vitejs/plugin-vue");
    plugins.push(vue());
  }
  plugins.push(vueComponentMeta());
  return (0, import_vite2.mergeConfig)(config, {
    plugins,
    resolve: {
      alias: {
        vue: "vue/dist/vue.esm-bundler.js"
      }
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  core,
  viteFinal
});
