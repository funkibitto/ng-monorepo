import { resolve, join, dirname } from 'node:path';
import { fileURLToPath, pathToFileURL } from 'node:url';
import { createRequire } from 'node:module';
import { mergeConfig, searchForWorkspaceRoot } from 'vite';

const packageDir = resolve(fileURLToPath(
  import.meta.url
), "../..");
const distDir = resolve(fileURLToPath(
  import.meta.url
), "../..", "dist");
const runtimeDir = resolve(distDir, "runtime");
const pluginsDir = resolve(runtimeDir, "plugins");
const componentsDir = resolve(runtimeDir, "components");
const composablesDir = resolve(runtimeDir, "composables");
const dirs = [distDir, packageDir, pluginsDir, componentsDir, composablesDir];
let nuxt;
function extendComponents(nuxt2) {
  nuxt2.hook("components:extend", (components) => {
    const nuxtLink = components.find(({ name }) => name === "NuxtLink");
    nuxtLink.filePath = join(runtimeDir, "components/nuxt-link");
    nuxtLink.shortPath = join(runtimeDir, "components/nuxt-link");
    nuxt2.options.build.transpile.push(nuxtLink.filePath);
  });
}
async function extendComposables(nuxt2) {
  const { addImportsSources } = await import('@nuxt/kit');
  nuxt2.options.build.transpile.push(composablesDir);
  addImportsSources({ imports: ["useRouter"], from: join(composablesDir, "router") });
}
async function defineNuxtConfig(baseConfig) {
  const { loadNuxt, buildNuxt, addPlugin, extendPages } = await import('@nuxt/kit');
  nuxt = await loadNuxt({
    rootDir: baseConfig.root,
    ready: false,
    dev: false,
    overrides: {
      ssr: false
    }
  });
  if (nuxt.options.builder !== "@nuxt/vite-builder")
    throw new Error(`Storybook-Nuxt does not support '${nuxt.options.builder}' for now.`);
  let extendedConfig = {};
  nuxt.hook("modules:done", () => {
    extendComposables(nuxt);
    addPlugin({
      src: join(pluginsDir, "storybook"),
      mode: "client"
    });
    extendComponents(nuxt);
    extendPages((pages) => {
      pages.push({
        name: "storybook-iframe",
        path: "/iframe.html"
      });
    });
    nuxt.hook(
      "vite:extendConfig",
      (config, { isClient }) => {
        if (isClient)
          extendedConfig = mergeConfig(config, baseConfig);
      }
    );
  });
  await nuxt.ready();
  try {
    await buildNuxt(nuxt);
    return {
      viteConfig: extendedConfig,
      nuxt
    };
  } catch (e) {
    throw new Error(e);
  }
}
const core = async (config) => {
  return {
    ...config,
    builder: "@storybook/builder-vite",
    renderer: "@storybook/vue3"
  };
};
const previewAnnotations = async (entry = []) => {
  return [...entry, resolve(packageDir, "preview")];
};
const viteFinal = async (config, options) => {
  const getStorybookViteConfig = async (c, o) => {
    const presetURL = pathToFileURL(join(await getPackageDir("@storybook/vue3-vite"), "preset.js"));
    const { viteFinal: ViteFile } = await import(presetURL.href);
    if (!ViteFile)
      throw new Error("ViteFile not found");
    return ViteFile(c, o);
  };
  const nuxtConfig = await defineNuxtConfig(await getStorybookViteConfig(config, options));
  return mergeConfig(nuxtConfig.viteConfig, {
    build: { rollupOptions: { external: ["vue", "vue-demi"] } },
    define: {
      __NUXT__: JSON.stringify({ config: nuxtConfig.nuxt.options.runtimeConfig })
    },
    server: {
      fs: { allow: [searchForWorkspaceRoot(process.cwd()), ...dirs] }
    },
    envPrefix: ["NUXT_"]
  });
};
async function getPackageDir(frameworkPackageName) {
  try {
    const require = createRequire(import.meta.url);
    const packageDir2 = dirname(require.resolve(join(frameworkPackageName, "package.json"), { paths: [process.cwd()] }));
    return packageDir2;
  } catch (e) {
  }
  throw new Error(`Cannot find ${frameworkPackageName},`);
}

export { core, previewAnnotations, viteFinal };
